{"ast":null,"code":"import { c as createCommonjsModule, b as commonjsGlobal, a as set, s as status, j as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\nimport { g as getUrlByMask, a as getCallFrame, m as matchRequestUrl, b as prepareRequest, c as prepareResponse, d as getTimestamp, e as getStatusCodeColor } from './getCallFrame-deps.js';\nvar punycode = createCommonjsModule(function (module, exports) {\n  (function (root) {\n    /** Detect free variables */\n    var freeExports = exports && !exports.nodeType && exports;\n    var freeModule = module && !module.nodeType && module;\n    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;\n\n    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {\n      root = freeGlobal;\n    }\n    /**\n     * The `punycode` object.\n     * @name punycode\n     * @type Object\n     */\n\n\n    var punycode,\n\n    /** Highest positive signed 32-bit float value */\n    maxInt = 2147483647,\n        // aka. 0x7FFFFFFF or 2^31-1\n\n    /** Bootstring parameters */\n    base = 36,\n        tMin = 1,\n        tMax = 26,\n        skew = 38,\n        damp = 700,\n        initialBias = 72,\n        initialN = 128,\n        // 0x80\n    delimiter = '-',\n        // '\\x2D'\n\n    /** Regular expressions */\n    regexPunycode = /^xn--/,\n        regexNonASCII = /[^\\x20-\\x7E]/,\n        // unprintable ASCII chars + non-ASCII chars\n    regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n        // RFC 3490 separators\n\n    /** Error messages */\n    errors = {\n      'overflow': 'Overflow: input needs wider integers to process',\n      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n      'invalid-input': 'Invalid input'\n    },\n\n    /** Convenience shortcuts */\n    baseMinusTMin = base - tMin,\n        floor = Math.floor,\n        stringFromCharCode = String.fromCharCode,\n\n    /** Temporary variable */\n    key;\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * A generic error utility function.\n     * @private\n     * @param {String} type The error type.\n     * @returns {Error} Throws a `RangeError` with the applicable error message.\n     */\n\n    function error(type) {\n      throw RangeError(errors[type]);\n    }\n    /**\n     * A generic `Array#map` utility function.\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} callback The function that gets called for every array\n     * item.\n     * @returns {Array} A new array of values returned by the callback function.\n     */\n\n\n    function map(array, fn) {\n      var length = array.length;\n      var result = [];\n\n      while (length--) {\n        result[length] = fn(array[length]);\n      }\n\n      return result;\n    }\n    /**\n     * A simple `Array#map`-like wrapper to work with domain name strings or email\n     * addresses.\n     * @private\n     * @param {String} domain The domain name or email address.\n     * @param {Function} callback The function that gets called for every\n     * character.\n     * @returns {Array} A new string of characters returned by the callback\n     * function.\n     */\n\n\n    function mapDomain(string, fn) {\n      var parts = string.split('@');\n      var result = '';\n\n      if (parts.length > 1) {\n        // In email addresses, only the domain name should be punycoded. Leave\n        // the local part (i.e. everything up to `@`) intact.\n        result = parts[0] + '@';\n        string = parts[1];\n      } // Avoid `split(regex)` for IE8 compatibility. See #17.\n\n\n      string = string.replace(regexSeparators, '\\x2E');\n      var labels = string.split('.');\n      var encoded = map(labels, fn).join('.');\n      return result + encoded;\n    }\n    /**\n     * Creates an array containing the numeric code points of each Unicode\n     * character in the string. While JavaScript uses UCS-2 internally,\n     * this function will convert a pair of surrogate halves (each of which\n     * UCS-2 exposes as separate characters) into a single code point,\n     * matching UTF-16.\n     * @see `punycode.ucs2.encode`\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode.ucs2\n     * @name decode\n     * @param {String} string The Unicode input string (UCS-2).\n     * @returns {Array} The new array of code points.\n     */\n\n\n    function ucs2decode(string) {\n      var output = [],\n          counter = 0,\n          length = string.length,\n          value,\n          extra;\n\n      while (counter < length) {\n        value = string.charCodeAt(counter++);\n\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n          // high surrogate, and there is a next character\n          extra = string.charCodeAt(counter++);\n\n          if ((extra & 0xFC00) == 0xDC00) {\n            // low surrogate\n            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n          } else {\n            // unmatched surrogate; only append this code unit, in case the next\n            // code unit is the high surrogate of a surrogate pair\n            output.push(value);\n            counter--;\n          }\n        } else {\n          output.push(value);\n        }\n      }\n\n      return output;\n    }\n    /**\n     * Creates a string based on an array of numeric code points.\n     * @see `punycode.ucs2.decode`\n     * @memberOf punycode.ucs2\n     * @name encode\n     * @param {Array} codePoints The array of numeric code points.\n     * @returns {String} The new Unicode string (UCS-2).\n     */\n\n\n    function ucs2encode(array) {\n      return map(array, function (value) {\n        var output = '';\n\n        if (value > 0xFFFF) {\n          value -= 0x10000;\n          output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n          value = 0xDC00 | value & 0x3FF;\n        }\n\n        output += stringFromCharCode(value);\n        return output;\n      }).join('');\n    }\n    /**\n     * Converts a basic code point into a digit/integer.\n     * @see `digitToBasic()`\n     * @private\n     * @param {Number} codePoint The basic numeric code point value.\n     * @returns {Number} The numeric value of a basic code point (for use in\n     * representing integers) in the range `0` to `base - 1`, or `base` if\n     * the code point does not represent a value.\n     */\n\n\n    function basicToDigit(codePoint) {\n      if (codePoint - 48 < 10) {\n        return codePoint - 22;\n      }\n\n      if (codePoint - 65 < 26) {\n        return codePoint - 65;\n      }\n\n      if (codePoint - 97 < 26) {\n        return codePoint - 97;\n      }\n\n      return base;\n    }\n    /**\n     * Converts a digit/integer into a basic code point.\n     * @see `basicToDigit()`\n     * @private\n     * @param {Number} digit The numeric value of a basic code point.\n     * @returns {Number} The basic code point whose value (when used for\n     * representing integers) is `digit`, which needs to be in the range\n     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n     * used; else, the lowercase form is used. The behavior is undefined\n     * if `flag` is non-zero and `digit` has no uppercase form.\n     */\n\n\n    function digitToBasic(digit, flag) {\n      //  0..25 map to ASCII a..z or A..Z\n      // 26..35 map to ASCII 0..9\n      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n    }\n    /**\n     * Bias adaptation function as per section 3.4 of RFC 3492.\n     * http://tools.ietf.org/html/rfc3492#section-3.4\n     * @private\n     */\n\n\n    function adapt(delta, numPoints, firstTime) {\n      var k = 0;\n      delta = firstTime ? floor(delta / damp) : delta >> 1;\n      delta += floor(delta / numPoints);\n\n      for (;\n      /* no initialization */\n      delta > baseMinusTMin * tMax >> 1; k += base) {\n        delta = floor(delta / baseMinusTMin);\n      }\n\n      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n    }\n    /**\n     * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n     * symbols.\n     * @memberOf punycode\n     * @param {String} input The Punycode string of ASCII-only symbols.\n     * @returns {String} The resulting string of Unicode symbols.\n     */\n\n\n    function decode(input) {\n      // Don't use UCS-2\n      var output = [],\n          inputLength = input.length,\n          out,\n          i = 0,\n          n = initialN,\n          bias = initialBias,\n          basic,\n          j,\n          index,\n          oldi,\n          w,\n          k,\n          digit,\n          t,\n\n      /** Cached calculation results */\n      baseMinusT; // Handle the basic code points: let `basic` be the number of input code\n      // points before the last delimiter, or `0` if there is none, then copy\n      // the first basic code points to the output.\n\n      basic = input.lastIndexOf(delimiter);\n\n      if (basic < 0) {\n        basic = 0;\n      }\n\n      for (j = 0; j < basic; ++j) {\n        // if it's not a basic code point\n        if (input.charCodeAt(j) >= 0x80) {\n          error('not-basic');\n        }\n\n        output.push(input.charCodeAt(j));\n      } // Main decoding loop: start just after the last delimiter if any basic code\n      // points were copied; start at the beginning otherwise.\n\n\n      for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)\n      /* no final expression */\n      {\n        // `index` is the index of the next character to be consumed.\n        // Decode a generalized variable-length integer into `delta`,\n        // which gets added to `i`. The overflow checking is easier\n        // if we increase `i` as we go, then subtract off its starting\n        // value at the end to obtain `delta`.\n        for (oldi = i, w = 1, k = base;;\n        /* no condition */\n        k += base) {\n          if (index >= inputLength) {\n            error('invalid-input');\n          }\n\n          digit = basicToDigit(input.charCodeAt(index++));\n\n          if (digit >= base || digit > floor((maxInt - i) / w)) {\n            error('overflow');\n          }\n\n          i += digit * w;\n          t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n          if (digit < t) {\n            break;\n          }\n\n          baseMinusT = base - t;\n\n          if (w > floor(maxInt / baseMinusT)) {\n            error('overflow');\n          }\n\n          w *= baseMinusT;\n        }\n\n        out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,\n        // incrementing `n` each time, so we'll fix that now:\n\n        if (floor(i / out) > maxInt - n) {\n          error('overflow');\n        }\n\n        n += floor(i / out);\n        i %= out; // Insert `n` at position `i` of the output\n\n        output.splice(i++, 0, n);\n      }\n\n      return ucs2encode(output);\n    }\n    /**\n     * Converts a string of Unicode symbols (e.g. a domain name label) to a\n     * Punycode string of ASCII-only symbols.\n     * @memberOf punycode\n     * @param {String} input The string of Unicode symbols.\n     * @returns {String} The resulting Punycode string of ASCII-only symbols.\n     */\n\n\n    function encode(input) {\n      var n,\n          delta,\n          handledCPCount,\n          basicLength,\n          bias,\n          j,\n          m,\n          q,\n          k,\n          t,\n          currentValue,\n          output = [],\n\n      /** `inputLength` will hold the number of code points in `input`. */\n      inputLength,\n\n      /** Cached calculation results */\n      handledCPCountPlusOne,\n          baseMinusT,\n          qMinusT; // Convert the input in UCS-2 to Unicode\n\n      input = ucs2decode(input); // Cache the length\n\n      inputLength = input.length; // Initialize the state\n\n      n = initialN;\n      delta = 0;\n      bias = initialBias; // Handle the basic code points\n\n      for (j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n\n        if (currentValue < 0x80) {\n          output.push(stringFromCharCode(currentValue));\n        }\n      }\n\n      handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;\n      // `basicLength` is the number of basic code points.\n      // Finish the basic string - if it is not empty - with a delimiter\n\n      if (basicLength) {\n        output.push(delimiter);\n      } // Main encoding loop:\n\n\n      while (handledCPCount < inputLength) {\n        // All non-basic code points < n have been handled already. Find the next\n        // larger one:\n        for (m = maxInt, j = 0; j < inputLength; ++j) {\n          currentValue = input[j];\n\n          if (currentValue >= n && currentValue < m) {\n            m = currentValue;\n          }\n        } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n        // but guard against overflow\n\n\n        handledCPCountPlusOne = handledCPCount + 1;\n\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n          error('overflow');\n        }\n\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n\n        for (j = 0; j < inputLength; ++j) {\n          currentValue = input[j];\n\n          if (currentValue < n && ++delta > maxInt) {\n            error('overflow');\n          }\n\n          if (currentValue == n) {\n            // Represent delta as a generalized variable-length integer\n            for (q = delta, k = base;;\n            /* no condition */\n            k += base) {\n              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n              if (q < t) {\n                break;\n              }\n\n              qMinusT = q - t;\n              baseMinusT = base - t;\n              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n              q = floor(qMinusT / baseMinusT);\n            }\n\n            output.push(stringFromCharCode(digitToBasic(q, 0)));\n            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n            delta = 0;\n            ++handledCPCount;\n          }\n        }\n\n        ++delta;\n        ++n;\n      }\n\n      return output.join('');\n    }\n    /**\n     * Converts a Punycode string representing a domain name or an email address\n     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n     * it doesn't matter if you call it on a string that has already been\n     * converted to Unicode.\n     * @memberOf punycode\n     * @param {String} input The Punycoded domain name or email address to\n     * convert to Unicode.\n     * @returns {String} The Unicode representation of the given Punycode\n     * string.\n     */\n\n\n    function toUnicode(input) {\n      return mapDomain(input, function (string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n      });\n    }\n    /**\n     * Converts a Unicode string representing a domain name or an email address to\n     * Punycode. Only the non-ASCII parts of the domain name will be converted,\n     * i.e. it doesn't matter if you call it with a domain that's already in\n     * ASCII.\n     * @memberOf punycode\n     * @param {String} input The domain name or email address to convert, as a\n     * Unicode string.\n     * @returns {String} The Punycode representation of the given domain name or\n     * email address.\n     */\n\n\n    function toASCII(input) {\n      return mapDomain(input, function (string) {\n        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n      });\n    }\n    /*--------------------------------------------------------------------------*/\n\n    /** Define the public API */\n\n\n    punycode = {\n      /**\n       * A string representing the current Punycode.js version number.\n       * @memberOf punycode\n       * @type String\n       */\n      'version': '1.3.2',\n\n      /**\n       * An object of methods to convert from JavaScript's internal character\n       * representation (UCS-2) to Unicode code points, and back.\n       * @see <https://mathiasbynens.be/notes/javascript-encoding>\n       * @memberOf punycode\n       * @type Object\n       */\n      'ucs2': {\n        'decode': ucs2decode,\n        'encode': ucs2encode\n      },\n      'decode': decode,\n      'encode': encode,\n      'toASCII': toASCII,\n      'toUnicode': toUnicode\n    };\n    /** Expose `punycode` */\n    // Some AMD build optimizers, like r.js, check for specific condition patterns\n    // like the following:\n\n    if (freeExports && freeModule) {\n      if (module.exports == freeExports) {\n        // in Node.js or RingoJS v0.8.0+\n        freeModule.exports = punycode;\n      } else {\n        // in Narwhal or RingoJS v0.7.0-\n        for (key in punycode) {\n          punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n        }\n      }\n    } else {\n      // in Rhino or a web browser\n      root.punycode = punycode;\n    }\n  })(commonjsGlobal);\n});\nvar util = {\n  isString: function (arg) {\n    return typeof arg === 'string';\n  },\n  isObject: function (arg) {\n    return typeof arg === 'object' && arg !== null;\n  },\n  isNull: function (arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function (arg) {\n    return arg == null;\n  }\n}; // Copyright Joyent, Inc. and other Node contributors.\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar decode = function (qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n  var maxKeys = 1000;\n\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count\n\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr,\n        vstr,\n        k,\n        v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n}; // Copyright Joyent, Inc. and other Node contributors.\n\n\nvar stringifyPrimitive = function (v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nvar encode = function (obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function (k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function (v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar querystring = createCommonjsModule(function (module, exports) {\n  exports.decode = exports.parse = decode;\n  exports.encode = exports.stringify = encode;\n});\nvar format = urlFormat;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n    // RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\nunsafeProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that never have a hostname.\nhostlessProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  'http': true,\n  'https': true,\n  'ftp': true,\n  'gopher': true,\n  'file': true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n};\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  } // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n\n\n  var queryIndex = url.indexOf('?'),\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n  var rest = url; // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  } // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    } // Now we have a portion which is definitely the auth.\n    // Pull that off.\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) hostEnd = rest.length;\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    this.parseHost(); // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n\n    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host; // strip [ and ] from the hostname\n    // the host field still retains them, though\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  } // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n\n\n  if (!unsafeProtocol[lowerProto]) {\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) continue;\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n\n  if (rest) this.pathname = rest;\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  } //to support http.request\n\n\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  } // finally, reconstruct the href based on what has been validated.\n\n\n  this.href = this.format();\n  return this;\n}; // format a parsed object into a url string\n\n\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || query && '?' + query || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n};\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nUrl.prototype.resolveObject = function (relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  } // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n\n\n  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.\n\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  } // hrefs like //foo/bar always cut to the protocol.\n\n\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') result[rkey] = relative[rkey];\n    } //urlParse appends trailing / to urls like http://www.example.com\n\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n\n      while (relPath.length && !(relative.host = relPath.shift()));\n\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port; // to support http.request\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\n    }\n\n    result.host = '';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath; // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query; //to support http.request\n\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null; //to support http.request\n\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  } // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back\n\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  } //to support request.http\n\n\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) this.hostname = host;\n};\n/**\r\n * Returns a relative URL if the given request URL is relative to the current origin.\r\n * Otherwise returns an absolute URL.\r\n */\n\n\nconst getPublicUrlFromRequest = request => {\n  return request.referrer.startsWith(request.url.origin) ? request.url.pathname : format({\n    protocol: request.url.protocol,\n    host: request.url.host,\n    pathname: request.url.pathname\n  });\n};\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\n\n\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\nvar RESTMethods;\n\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\n\nconst restContext = {\n  set,\n  status,\n  cookie,\n  body,\n  text,\n  json,\n  xml,\n  delay,\n  fetch\n};\n\nconst createRestHandler = method => {\n  return (mask, resolver) => {\n    const resolvedMask = getUrlByMask(mask);\n    const callFrame = getCallFrame();\n    return {\n      parse(req) {\n        // Match the request during parsing to prevent matching it twice\n        // in order to get the request URL parameters.\n        const match = matchRequestUrl(req.url, mask);\n        return {\n          match\n        };\n      },\n\n      predicate(req, parsedRequest) {\n        return isStringEqual(method, req.method) && parsedRequest.match.matches;\n      },\n\n      getPublicRequest(req, parsedRequest) {\n        // Get request path parameters based on the given mask\n        const params = mask && parsedRequest.match.params || {};\n        return Object.assign(Object.assign({}, req), {\n          params\n        });\n      },\n\n      resolver,\n\n      defineContext() {\n        return restContext;\n      },\n\n      log(req, res, handler) {\n        // Warn on request handler URL containing query parameters.\n        if (resolvedMask instanceof URL && resolvedMask.search !== '') {\n          const queryParams = [];\n          resolvedMask.searchParams.forEach((_, paramName) => queryParams.push(paramName));\n          console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams.map(paramName => `\\\n  const ${paramName} = query.get(\"${paramName}\")`).join('\\n')}\n})\\\n`);\n        }\n\n        const publicUrl = getPublicUrlFromRequest(req);\n        const loggedRequest = prepareRequest(req);\n        const loggedResponse = prepareResponse(res);\n        console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), req.method, publicUrl, `color:${getStatusCodeColor(res.status)}`, res.status, 'color:inherit');\n        console.log('Request', loggedRequest);\n        console.log('Handler:', {\n          mask,\n          resolver: handler.resolver\n        });\n        console.log('Response', loggedResponse);\n        console.groupEnd();\n      },\n\n      getMetaInfo() {\n        return {\n          type: 'rest',\n          header: `[rest] ${method} ${mask.toString()}`,\n          mask,\n          callFrame\n        };\n      }\n\n    };\n  };\n};\n\nconst rest = {\n  /**\r\n   * Captures a HEAD request by a given path.\r\n   * @example\r\n   * rest.head('/numbers', (req, res, ctx) => {\r\n   *   return res(ctx.status(302))\r\n   * })\r\n   * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n   */\n  head: createRestHandler(RESTMethods.HEAD),\n\n  /**\r\n   * Captures a GET request by a given path.\r\n   * @example\r\n   * rest.get('/numbers', (req, res, ctx) => {\r\n   *   return res(ctx.json([1, 2, 3]))\r\n   * })\r\n   * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n   */\n  get: createRestHandler(RESTMethods.GET),\n\n  /**\r\n   * Captures a POST request by a given path.\r\n   * @example\r\n   * rest.post('/numbers', (req, res, ctx) => {\r\n   *   return res(ctx.text('success'))\r\n   * })\r\n   * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n   */\n  post: createRestHandler(RESTMethods.POST),\n\n  /**\r\n   * Captures a PUT request by a given path.\r\n   * @example\r\n   * rest.put('/numbers', (req, res, ctx) => {\r\n   *   const { numbers } = req.body\r\n   *   return res(ctx.json(numbers))\r\n   * })\r\n   * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n   */\n  put: createRestHandler(RESTMethods.PUT),\n\n  /**\r\n   * Captures a DELETE request by a given path.\r\n   * @example\r\n   * rest.delete('/numbers', (req, res, ctx) => {\r\n   *   const index = req.url.searchParams.get('index')\r\n   *   prevNumbers.splice(index, 1)\r\n   *   return res(ctx.json(nextNumbers))\r\n   * })\r\n   * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n   */\n  delete: createRestHandler(RESTMethods.DELETE),\n\n  /**\r\n   * Captures a PATCH request by a given path.\r\n   * @example\r\n   * rest.patch('/numbers', (req, res, ctx) => {\r\n   *   const { numbers } = req.body\r\n   *   const nextNumbers = prevNumbers.concat(number)\r\n   *   return res(ctx.json(nextNumbers))\r\n   * })\r\n   * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n   */\n  patch: createRestHandler(RESTMethods.PATCH),\n\n  /**\r\n   * Captures an OPTIONS request by a given path.\r\n   * @example\r\n   * rest.options('/numbers', (req, res, ctx) => {\r\n   *   return res(ctx.set('Allow', 'GET,HEAD,POST'))\r\n   * })\r\n   * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n   */\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RESTMethods as R, restContext as a, getPublicUrlFromRequest as g, isStringEqual as i, rest as r };","map":{"version":3,"sources":["/Users/haoyan/reactpro/项目/jira项目/fake-jira-main/node_modules/msw/lib/esm/rest-deps.js"],"names":["c","createCommonjsModule","b","commonjsGlobal","a","set","s","status","j","json","d","delay","f","fetch","cookie","body","t","text","x","xml","g","getUrlByMask","getCallFrame","m","matchRequestUrl","prepareRequest","prepareResponse","getTimestamp","e","getStatusCodeColor","punycode","module","exports","root","freeExports","nodeType","freeModule","freeGlobal","global","window","self","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","key","error","type","RangeError","map","array","fn","length","result","mapDomain","string","parts","split","replace","labels","encoded","join","ucs2decode","output","counter","value","extra","charCodeAt","push","ucs2encode","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","out","i","n","bias","basic","index","oldi","w","baseMinusT","lastIndexOf","splice","encode","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","toUnicode","test","slice","toLowerCase","toASCII","hasOwnProperty","util","isString","arg","isObject","isNull","isNullOrUndefined","obj","prop","Object","prototype","call","qs","sep","eq","options","regexp","maxKeys","len","idx","indexOf","kstr","vstr","v","substr","decodeURIComponent","Array","isArray","stringifyPrimitive","isFinite","name","undefined","keys","ks","encodeURIComponent","querystring","parse","stringify","format","urlFormat","Url","protocol","slashes","auth","host","port","hostname","hash","search","query","pathname","path","href","protocolPattern","portPattern","simplePathPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","hostlessProtocol","slashedProtocol","urlParse","url","parseQueryString","slashesDenoteHost","u","TypeError","queryIndex","splitter","uSplit","slashRegex","rest","trim","simplePath","exec","proto","lowerProto","match","hostEnd","hec","atSign","parseHost","ipv6Hostname","hostparts","l","part","newpart","validParts","notHost","bit","unshift","p","h","ae","esc","escape","qm","charAt","resolve","relative","resolveObject","rel","tkeys","tk","tkey","rkeys","rk","rkey","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","authInHost","last","hasTrailingSlash","up","isAbsolute","getPublicUrlFromRequest","request","referrer","startsWith","origin","isStringEqual","actual","expected","RESTMethods","restContext","createRestHandler","method","mask","resolver","resolvedMask","callFrame","req","predicate","parsedRequest","matches","getPublicRequest","params","assign","defineContext","log","res","handler","URL","queryParams","searchParams","forEach","_","paramName","console","warn","publicUrl","loggedRequest","loggedResponse","groupCollapsed","groupEnd","getMetaInfo","header","toString","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","OPTIONS","R","r"],"mappings":"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","sourcesContent":["import { c as createCommonjsModule, b as commonjsGlobal, a as set, s as status, j as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\nimport { g as getUrlByMask, a as getCallFrame, m as matchRequestUrl, b as prepareRequest, c as prepareResponse, d as getTimestamp, e as getStatusCodeColor } from './getCallFrame-deps.js';\n\nvar punycode = createCommonjsModule(function (module, exports) {\n(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports =  exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule =  module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(commonjsGlobal));\n});\n\nvar util = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n// Copyright Joyent, Inc. and other Node contributors.\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar decode = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\n// Copyright Joyent, Inc. and other Node contributors.\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nvar encode = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar querystring = createCommonjsModule(function (module, exports) {\n\nexports.decode = exports.parse = decode;\nexports.encode = exports.stringify = encode;\n});\n\nvar format = urlFormat;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n/**\r\n * Returns a relative URL if the given request URL is relative to the current origin.\r\n * Otherwise returns an absolute URL.\r\n */\r\nconst getPublicUrlFromRequest = (request) => {\r\n    return request.referrer.startsWith(request.url.origin)\r\n        ? request.url.pathname\r\n        : format({\r\n            protocol: request.url.protocol,\r\n            host: request.url.host,\r\n            pathname: request.url.pathname,\r\n        });\r\n};\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\nconst createRestHandler = (method) => {\r\n    return (mask, resolver) => {\r\n        const resolvedMask = getUrlByMask(mask);\r\n        const callFrame = getCallFrame();\r\n        return {\r\n            parse(req) {\r\n                // Match the request during parsing to prevent matching it twice\r\n                // in order to get the request URL parameters.\r\n                const match = matchRequestUrl(req.url, mask);\r\n                return {\r\n                    match,\r\n                };\r\n            },\r\n            predicate(req, parsedRequest) {\r\n                return isStringEqual(method, req.method) && parsedRequest.match.matches;\r\n            },\r\n            getPublicRequest(req, parsedRequest) {\r\n                // Get request path parameters based on the given mask\r\n                const params = (mask && parsedRequest.match.params) || {};\r\n                return Object.assign(Object.assign({}, req), { params });\r\n            },\r\n            resolver,\r\n            defineContext() {\r\n                return restContext;\r\n            },\r\n            log(req, res, handler) {\r\n                // Warn on request handler URL containing query parameters.\r\n                if (resolvedMask instanceof URL && resolvedMask.search !== '') {\r\n                    const queryParams = [];\r\n                    resolvedMask.searchParams.forEach((_, paramName) => queryParams.push(paramName));\r\n                    console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams\r\n                        .map((paramName) => `\\\n  const ${paramName} = query.get(\"${paramName}\")`)\r\n                        .join('\\n')}\n})\\\n`);\r\n                }\r\n                const publicUrl = getPublicUrlFromRequest(req);\r\n                const loggedRequest = prepareRequest(req);\r\n                const loggedResponse = prepareResponse(res);\r\n                console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), req.method, publicUrl, `color:${getStatusCodeColor(res.status)}`, res.status, 'color:inherit');\r\n                console.log('Request', loggedRequest);\r\n                console.log('Handler:', {\r\n                    mask,\r\n                    resolver: handler.resolver,\r\n                });\r\n                console.log('Response', loggedResponse);\r\n                console.groupEnd();\r\n            },\r\n            getMetaInfo() {\r\n                return {\r\n                    type: 'rest',\r\n                    header: `[rest] ${method} ${mask.toString()}`,\r\n                    mask,\r\n                    callFrame,\r\n                };\r\n            },\r\n        };\r\n    };\r\n};\r\nconst rest = {\r\n    /**\r\n     * Captures a HEAD request by a given path.\r\n     * @example\r\n     * rest.head('/numbers', (req, res, ctx) => {\r\n     *   return res(ctx.status(302))\r\n     * })\r\n     * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n     */\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    /**\r\n     * Captures a GET request by a given path.\r\n     * @example\r\n     * rest.get('/numbers', (req, res, ctx) => {\r\n     *   return res(ctx.json([1, 2, 3]))\r\n     * })\r\n     * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n     */\r\n    get: createRestHandler(RESTMethods.GET),\r\n    /**\r\n     * Captures a POST request by a given path.\r\n     * @example\r\n     * rest.post('/numbers', (req, res, ctx) => {\r\n     *   return res(ctx.text('success'))\r\n     * })\r\n     * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n     */\r\n    post: createRestHandler(RESTMethods.POST),\r\n    /**\r\n     * Captures a PUT request by a given path.\r\n     * @example\r\n     * rest.put('/numbers', (req, res, ctx) => {\r\n     *   const { numbers } = req.body\r\n     *   return res(ctx.json(numbers))\r\n     * })\r\n     * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n     */\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    /**\r\n     * Captures a DELETE request by a given path.\r\n     * @example\r\n     * rest.delete('/numbers', (req, res, ctx) => {\r\n     *   const index = req.url.searchParams.get('index')\r\n     *   prevNumbers.splice(index, 1)\r\n     *   return res(ctx.json(nextNumbers))\r\n     * })\r\n     * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n     */\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    /**\r\n     * Captures a PATCH request by a given path.\r\n     * @example\r\n     * rest.patch('/numbers', (req, res, ctx) => {\r\n     *   const { numbers } = req.body\r\n     *   const nextNumbers = prevNumbers.concat(number)\r\n     *   return res(ctx.json(nextNumbers))\r\n     * })\r\n     * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n     */\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    /**\r\n     * Captures an OPTIONS request by a given path.\r\n     * @example\r\n     * rest.options('/numbers', (req, res, ctx) => {\r\n     *   return res(ctx.set('Allow', 'GET,HEAD,POST'))\r\n     * })\r\n     * @see {@link https://mswjs.io/docs/api/rest `rest`}\r\n     */\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RESTMethods as R, restContext as a, getPublicUrlFromRequest as g, isStringEqual as i, rest as r };\n"]},"metadata":{},"sourceType":"module"}