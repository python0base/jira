{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n/*\n * @Descripttion: 简单的自定义hook和工具类函数\n * @Author: huangjitao\n * @Date: 2021-04-11 21:24:19\n * @Function: use of this file\n */\nimport { useCallback, useEffect, useReducer, useRef, useState } from \"react\";\n\nconst isFalsy = value => value === 0 ? false : !value;\n\nexport const cleanObject = object => {\n  const temp = { ...object\n  };\n  Object.keys(temp).forEach(key => {\n    const value = temp[key];\n\n    if (isFalsy(value)) {\n      delete temp[key];\n    }\n  });\n  return temp;\n};\n/**\n * 仅组件挂载时的副作用\n * @param callback 回调函数\n */\n\nexport const useMount = callback => {\n  _s();\n\n  useEffect(() => {\n    callback();\n  }, []);\n};\n/**\n * 节流函数\n * @param value 输入数值\n * @param delay 时延\n * @returns debounceValue：节流处理后的输入值\n */\n\n_s(useMount, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const useDebounce = (value, delay) => {\n  _s2();\n\n  const [debounceValue, setDebounceValue] = useState(value);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebounceValue(value);\n    }, delay);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n  return debounceValue;\n};\n/**\n * 返回组件的挂载状态\n * @returns mountedRef：如果还没挂载或者已经卸载，返回false；反之，返回true\n */\n\n_s2(useDebounce, \"M2sN0VLbDyklZTfjqPUnIiYotXI=\");\n\nexport const useMountedRef = () => {\n  _s3();\n\n  const mountedRef = useRef(false);\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n};\n\n_s3(useMountedRef, \"xHAgxWt6WwIY5B4iBYNZIcBucQc=\");\n\nexport const resetRoute = () => window.location.href = window.location.origin;\n/**\n * @function 自定义useArray练习，用于操作数组。\n * @param val 初始化数组\n * @returns clear：清空数组；removeIndex：移除数组特定位置的元素；add：添加元素\n */\n\nexport const useArray = val => {\n  _s4();\n\n  const [value, setValue] = useState(val);\n\n  const clear = () => {\n    setValue([]);\n  };\n\n  const removeIndex = index => {\n    const temp = [...value];\n    temp.splice(index, 1);\n    setValue(temp);\n  };\n\n  const add = thing => {\n    const temp = [...value];\n    temp.push(thing);\n    setValue(temp);\n  };\n\n  return {\n    value,\n    clear,\n    removeIndex,\n    add\n  };\n};\n/**\n * @function 自定义useUndo练习\n * @param {T}initialPresent 初始值\n * @returns\n */\n\n_s4(useArray, \"SFsem56Sph/dklyqp9lOtp3uhz8=\");\n\nconst UNDO = \"UNDO\";\nconst REDO = \"REDO\";\nconst SET = \"SET\";\nconst RESET = \"RESET\";\n\nconst undoReducer = (state, action) => {\n  const {\n    past,\n    present,\n    future\n  } = state;\n  const {\n    newPresent\n  } = action;\n\n  switch (action.type) {\n    case UNDO:\n      if (past.length === 0) return state;\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future]\n      };\n\n    case REDO:\n      if (future.length === 0) return state;\n      const next = future[0];\n      const newFuture = future.slice(1);\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture\n      };\n\n    case SET:\n      if (newPresent === present) return state;\n      return {\n        past: [...past, present],\n        present: newPresent,\n        future: []\n      };\n\n    case RESET:\n      return {\n        past: [],\n        present: newPresent,\n        future: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useUndo = initialPresent => {\n  _s5();\n\n  const [state, dispatch] = useReducer(undoReducer, {\n    past: [],\n    present: initialPresent,\n    future: []\n  });\n  const canUndo = state.past.length !== 0;\n  const canRedo = state.future.length !== 0;\n  /**\n   * 撤销\n   */\n\n  const undo = useCallback(() => {\n    dispatch({\n      type: UNDO\n    });\n  }, []);\n  /**\n   * 取消撤销\n   */\n\n  const redo = useCallback(() => {\n    dispatch({\n      type: REDO\n    });\n  }, []);\n  /**\n   * 指定为特定值\n   */\n\n  const set = useCallback(newPresent => {\n    dispatch({\n      type: SET,\n      newPresent: newPresent\n    });\n  }, []);\n  /**\n   * 重置为初始值\n   */\n\n  const reset = useCallback(() => {\n    dispatch({\n      type: RESET,\n      newPresent: initialPresent\n    });\n  }, [initialPresent]);\n  return [state, {\n    undo,\n    redo,\n    set,\n    reset,\n    canUndo,\n    canRedo\n  }];\n};\n\n_s5(useUndo, \"Vs0I0NAq8QWnwgpcU7TK5zqtbi0=\");","map":{"version":3,"sources":["/Users/haoyan/reactpro/项目/jira项目/fake-jira-main/src/utils/index.ts"],"names":["useCallback","useEffect","useReducer","useRef","useState","isFalsy","value","cleanObject","object","temp","Object","keys","forEach","key","useMount","callback","useDebounce","delay","debounceValue","setDebounceValue","timer","setTimeout","clearTimeout","useMountedRef","mountedRef","current","resetRoute","window","location","href","origin","useArray","val","setValue","clear","removeIndex","index","splice","add","thing","push","UNDO","REDO","SET","RESET","undoReducer","state","action","past","present","future","newPresent","type","length","previous","newPast","slice","next","newFuture","useUndo","initialPresent","dispatch","canUndo","canRedo","undo","redo","set","reset"],"mappings":"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","sourcesContent":["/*\n * @Descripttion: 简单的自定义hook和工具类函数\n * @Author: huangjitao\n * @Date: 2021-04-11 21:24:19\n * @Function: use of this file\n */\nimport { useCallback, useEffect, useReducer, useRef, useState } from \"react\";\n\nconst isFalsy = (value: unknown) => (value === 0 ? false : !value);\n\nexport const cleanObject = (object: { [key: string]: unknown }) => {\n  const temp = { ...object };\n  Object.keys(temp).forEach((key) => {\n    const value = temp[key];\n    if (isFalsy(value)) {\n      delete temp[key];\n    }\n  });\n  return temp;\n};\n\n/**\n * 仅组件挂载时的副作用\n * @param callback 回调函数\n */\nexport const useMount = (callback: () => void) => {\n  useEffect(() => {\n    callback();\n  }, []);\n};\n\n/**\n * 节流函数\n * @param value 输入数值\n * @param delay 时延\n * @returns debounceValue：节流处理后的输入值\n */\nexport const useDebounce = <T>(value: T, delay: number) => {\n  const [debounceValue, setDebounceValue] = useState(value);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebounceValue(value);\n    }, delay);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n  return debounceValue;\n};\n\n/**\n * 返回组件的挂载状态\n * @returns mountedRef：如果还没挂载或者已经卸载，返回false；反之，返回true\n */\nexport const useMountedRef = () => {\n  const mountedRef = useRef(false);\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n};\n\nexport const resetRoute = () => (window.location.href = window.location.origin);\n\n/**\n * @function 自定义useArray练习，用于操作数组。\n * @param val 初始化数组\n * @returns clear：清空数组；removeIndex：移除数组特定位置的元素；add：添加元素\n */\nexport const useArray = <T>(val: T[]) => {\n  const [value, setValue] = useState(val);\n  const clear = () => {\n    setValue([]);\n  };\n  const removeIndex = (index: number) => {\n    const temp = [...value];\n    temp.splice(index, 1);\n    setValue(temp);\n  };\n  const add = (thing: T) => {\n    const temp = [...value];\n    temp.push(thing);\n    setValue(temp);\n  };\n  return {\n    value,\n    clear,\n    removeIndex,\n    add,\n  };\n};\n\n/**\n * @function 自定义useUndo练习\n * @param {T}initialPresent 初始值\n * @returns\n */\n\nconst UNDO = \"UNDO\";\nconst REDO = \"REDO\";\nconst SET = \"SET\";\nconst RESET = \"RESET\";\n\ntype State<T> = {\n  past: T[]; // 存放历史值\n  present: T; // 当前值\n  future: T[]; // 存放undo值，用于取消撤销\n};\n\ntype Action<T> = {\n  newPresent?: T;\n  type: typeof UNDO | typeof REDO | typeof SET | typeof RESET;\n};\n\nconst undoReducer = <T>(state: State<T>, action: Action<T>) => {\n  const { past, present, future } = state;\n  const { newPresent } = action;\n  switch (action.type) {\n    case UNDO:\n      if (past.length === 0) return state;\n      const previous = past[past.length - 1];\n      const newPast = past.slice(0, past.length - 1);\n      return {\n        past: newPast,\n        present: previous,\n        future: [present, ...future],\n      };\n    case REDO:\n      if (future.length === 0) return state;\n      const next = future[0];\n      const newFuture = future.slice(1);\n      return {\n        past: [...past, present],\n        present: next,\n        future: newFuture,\n      };\n    case SET:\n      if (newPresent === present) return state;\n      return {\n        past: [...past, present],\n        present: newPresent,\n        future: [],\n      };\n    case RESET:\n      return {\n        past: [],\n        present: newPresent,\n        future: [],\n      };\n    default:\n      return state;\n  }\n};\nexport const useUndo = <T>(initialPresent: T) => {\n  const [state, dispatch] = useReducer(undoReducer, {\n    past: [],\n    present: initialPresent,\n    future: [],\n  } as State<T>);\n\n  const canUndo = state.past.length !== 0;\n  const canRedo = state.future.length !== 0;\n\n  /**\n   * 撤销\n   */\n  const undo = useCallback(() => {\n    dispatch({ type: UNDO });\n  }, []);\n\n  /**\n   * 取消撤销\n   */\n  const redo = useCallback(() => {\n    dispatch({ type: REDO });\n  }, []);\n\n  /**\n   * 指定为特定值\n   */\n  const set = useCallback((newPresent: T) => {\n    dispatch({ type: SET, newPresent: newPresent });\n  }, []);\n\n  /**\n   * 重置为初始值\n   */\n  const reset = useCallback(() => {\n    dispatch({ type: RESET, newPresent: initialPresent });\n  }, [initialPresent]);\n\n  return [state, { undo, redo, set, reset, canUndo, canRedo }] as const;\n};\n"]},"metadata":{},"sourceType":"module"}