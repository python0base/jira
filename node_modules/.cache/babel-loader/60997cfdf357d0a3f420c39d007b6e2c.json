{"ast":null,"code":"/*\n * @Descripttion: 错误便捷组件\n * @Author: huangjitao\n * @Date: 2021-04-24 08:29:38\n * @Function: 错误边界必须使用class组件，具体可参照 https://react.docschina.org/docs/error-boundaries.html\n */\nimport React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    // 更新 state 使下一次渲染能够显示降级后的 UI\n    return {\n      error\n    };\n  }\n\n  render() {\n    const {\n      error\n    } = this.state;\n    const {\n      fallbackRender,\n      children\n    } = this.props;\n\n    if (this.state.error) {\n      return fallbackRender({\n        error\n      });\n    } else {\n      return children;\n    }\n  }\n\n}\n\nexport default ErrorBoundary;","map":{"version":3,"sources":["/Users/haoyan/reactpro/项目/jira项目/fake-jira-main/src/components/ErrorBoundary.tsx"],"names":["React","ErrorBoundary","Component","state","error","getDerivedStateFromError","render","fallbackRender","children","props"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAGE;AAAA;AAAA;AAAA,SACAC,KADA,GACQ;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADR;AAAA;;AAG+B,SAAxBC,wBAAwB,CAACD,KAAD,EAAe;AAC5C;AACA,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEF,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,UAAM;AAAEI,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAA+B,KAAKC,KAA1C;;AACA,QAAI,KAAKN,KAAL,CAAWC,KAAf,EAAsB;AACpB,aAAOG,cAAc,CAAC;AAAEH,QAAAA;AAAF,OAAD,CAArB;AACD,KAFD,MAEO;AACL,aAAOI,QAAP;AACD;AACF;;AAhBD;;AAmBF,eAAeP,aAAf","sourcesContent":["/*\n * @Descripttion: 错误便捷组件\n * @Author: huangjitao\n * @Date: 2021-04-24 08:29:38\n * @Function: 错误边界必须使用class组件，具体可参照 https://react.docschina.org/docs/error-boundaries.html\n */\n\nimport React from \"react\";\n\ntype FallbackRender = (props: { error: Error | null }) => React.ReactElement;\n\nclass ErrorBoundary extends React.Component<\n  React.PropsWithChildren<{ fallbackRender: FallbackRender }>,\n  { error: Error | null }\n> {\n  state = { error: null };\n\n  static getDerivedStateFromError(error: Error) {\n    // 更新 state 使下一次渲染能够显示降级后的 UI\n    return { error };\n  }\n\n  render() {\n    const { error } = this.state;\n    const { fallbackRender, children } = this.props;\n    if (this.state.error) {\n      return fallbackRender({ error });\n    } else {\n      return children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n"]},"metadata":{},"sourceType":"module"}