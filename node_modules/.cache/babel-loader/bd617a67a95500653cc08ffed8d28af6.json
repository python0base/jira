{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/*\n * @Descripttion: 自定义异步请求hook\n * @Author: huangjitao\n * @Date: 2021-04-22 22:16:18\n * @Function: 用于统一处理请求后台接口\n */\nimport { useCallback, useReducer, useRef, useState } from \"react\";\nimport { useMountedRef } from \"utils\";\nconst defaultState = {\n  data: null,\n  error: null,\n  stat: \"idle\"\n};\n\nconst useSafeDispatch = dispatch => {\n  _s();\n\n  const mountedRef = useMountedRef();\n  return useCallback((...args) => mountedRef.current ? dispatch(...args) : void 0, [dispatch, mountedRef]);\n};\n\n_s(useSafeDispatch, \"5vzIy8fjM7CYcOSikWbd/QR+IzI=\", false, function () {\n  return [useMountedRef];\n});\n\nexport const useAsync = (initialState, isThrowError) => {\n  _s2();\n\n  const [state, dispatch] = useReducer((state, action) => ({ ...state,\n    ...action\n  }), { ...defaultState,\n    ...initialState\n  });\n  const safeDispatch = useSafeDispatch(dispatch);\n  const [retry, setRetry] = useState(() => () => {});\n  const runRef = useRef(); // 请求成功\n\n  const setData = useCallback(data => {\n    safeDispatch({\n      data,\n      error: null,\n      stat: \"success\"\n    });\n  }, [safeDispatch]); // 请求失败\n\n  const setError = useCallback(error => {\n    safeDispatch({\n      data: null,\n      error,\n      stat: \"error\"\n    });\n  }, [safeDispatch]); // 触发异步操作的函数\n\n  const run = useCallback((promise, retryConfig) => {\n    if (!promise || !promise.then) {\n      throw new Error(\"请传入promise函数\");\n    } // 当第一次请求时将该请求函数保存起来，以供后面刷新数据使用\n\n\n    if (retryConfig) {\n      runRef.current = () => run(retryConfig(), retryConfig);\n\n      setRetry(() => () => run(retryConfig(), retryConfig));\n    }\n\n    safeDispatch({\n      stat: \"loading\"\n    });\n    return promise.then(res => {\n      setData(res);\n      return res;\n    }).catch(error => {\n      setError(error); // 这里如果不手动抛出异常，则会在这里消化异常，外面就接收不到异常\n\n      if (isThrowError || isThrowError === undefined) {\n        return Promise.reject(error);\n      }\n\n      return error;\n    });\n  }, [isThrowError, safeDispatch, setData, setError]);\n  return {\n    isIdle: state.stat === \"idle\",\n    isLoading: state.stat === \"loading\",\n    isError: state.stat === \"error\",\n    isSuccess: state.stat === \"success\",\n    run,\n    setData,\n    setError,\n    retry,\n    ...state,\n    runRef\n  };\n};\n\n_s2(useAsync, \"eozA8AvVZp3XkLNgdoVM4HLnkp8=\", false, function () {\n  return [useSafeDispatch];\n});","map":{"version":3,"sources":["/Users/haoyan/reactpro/项目/jira项目/fake-jira-main/src/utils/useAsync.ts"],"names":["useCallback","useReducer","useRef","useState","useMountedRef","defaultState","data","error","stat","useSafeDispatch","dispatch","mountedRef","args","current","useAsync","initialState","isThrowError","state","action","safeDispatch","retry","setRetry","runRef","setData","setError","run","promise","retryConfig","then","Error","res","catch","undefined","Promise","reject","isIdle","isLoading","isError","isSuccess"],"mappings":"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","sourcesContent":["/*\n * @Descripttion: 自定义异步请求hook\n * @Author: huangjitao\n * @Date: 2021-04-22 22:16:18\n * @Function: 用于统一处理请求后台接口\n */\nimport { useCallback, useReducer, useRef, useState } from \"react\";\nimport { useMountedRef } from \"utils\";\n\ninterface State<T> {\n  data: T | null;\n  error: Error | null;\n  stat: \"idle\" | \"loading\" | \"error\" | \"success\";\n}\n\nconst defaultState: State<null> = {\n  data: null,\n  error: null,\n  stat: \"idle\",\n};\n\nconst useSafeDispatch = <T>(dispatch: (...args: T[]) => void) => {\n  const mountedRef = useMountedRef();\n  return useCallback(\n    (...args: T[]) => (mountedRef.current ? dispatch(...args) : void 0),\n    [dispatch, mountedRef]\n  );\n};\n\nexport const useAsync = <T>(\n  initialState?: State<T>,\n  isThrowError?: boolean\n) => {\n  const [state, dispatch] = useReducer(\n    (state: State<T>, action: Partial<State<T>>) => ({ ...state, ...action }),\n    { ...defaultState, ...initialState }\n  );\n  const safeDispatch = useSafeDispatch(dispatch);\n  const [retry, setRetry] = useState(() => () => {});\n  const runRef = useRef<any>();\n\n  // 请求成功\n  const setData = useCallback(\n    (data: T) => {\n      safeDispatch({\n        data,\n        error: null,\n        stat: \"success\",\n      });\n    },\n    [safeDispatch]\n  );\n\n  // 请求失败\n  const setError = useCallback(\n    (error: Error) => {\n      safeDispatch({\n        data: null,\n        error,\n        stat: \"error\",\n      });\n    },\n    [safeDispatch]\n  );\n\n  // 触发异步操作的函数\n  const run = useCallback(\n    (promise: Promise<T>, retryConfig?: () => Promise<T>) => {\n      if (!promise || !promise.then) {\n        throw new Error(\"请传入promise函数\");\n      }\n\n      // 当第一次请求时将该请求函数保存起来，以供后面刷新数据使用\n      if (retryConfig) {\n        runRef.current = () => run(retryConfig(), retryConfig);\n        setRetry(() => () => run(retryConfig(), retryConfig));\n      }\n\n      safeDispatch({ stat: \"loading\" });\n      return promise\n        .then((res) => {\n          setData(res);\n          return res;\n        })\n        .catch((error: Error) => {\n          setError(error);\n          // 这里如果不手动抛出异常，则会在这里消化异常，外面就接收不到异常\n          if (isThrowError || isThrowError === undefined) {\n            return Promise.reject(error);\n          }\n          return error;\n        });\n    },\n    [isThrowError, safeDispatch, setData, setError]\n  );\n\n  return {\n    isIdle: state.stat === \"idle\",\n    isLoading: state.stat === \"loading\",\n    isError: state.stat === \"error\",\n    isSuccess: state.stat === \"success\",\n    run,\n    setData,\n    setError,\n    retry,\n    ...state,\n    runRef,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}